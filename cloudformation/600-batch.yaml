---
AWSTemplateFormatVersion: 2010-09-09

Description: Batch

# aws --profile <profile>
#   iam create-role --role-name AmazonEC2SpotFleetRole \
#     --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal":{"Service":"spotfleet.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
#   iam attach-role-policy \
#     --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole \
#     --role-name AmazonEC2SpotFleetRole
#   iam create-service-linked-role --aws-service-name spot.amazonaws.com
#   iam create-service-linked-role --aws-service-name spotfleet.amazonaws.com

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parent Stacks
        Parameters:
          - VPCStackName
          - S3StackName
          - ECRStackName
    ParameterLabels:
      VPCStackName:
        default: Network Layer
      S3StackName:
        default: S3 Layer
      ECrStackName:
        default: Container Repository Layer

Parameters:

  VPCStackName:
    Type: String
    MinLength: 3
    MaxLength: 32
    AllowedPattern: (^vpc$|^[a-zA-Z][a-zA-Z0-9-]*-vpc$)
    ConstraintDescription: Please enter a valid VPC stack name
    Default: vpc

  S3StackName:
    Type: String
    MinLength: 2
    MaxLength: 32
    AllowedPattern: (^s3$|^[a-zA-Z][a-zA-Z0-9-]*-s3$)
    ConstraintDescription: Please enter a valid S3 stack name
    Default: s3

  ECRStackName:
    Type: String
    MinLength: 3
    MaxLength: 32
    AllowedPattern: (^ecr$|^[a-zA-Z][a-zA-Z0-9-]*-ecr$)
    ConstraintDescription: Please enter a valid ECR stack name
    Default: ecr

Resources:

# Batch

  CreateBagJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub ${AWS::StackName}-create-bag
      ContainerProperties:
        Image:
          Fn::ImportValue: !Sub ${ECRStackName}-create-bag
        JobRoleArn: !Ref CreateBagJobRole
        Memory: 256
        Vcpus: 1
      RetryStrategy:
          Attempts: 2 # Spot instance might fail
      Timeout:
          AttemptDurationSeconds: 120 # 2 minutes
      Type: container

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub ${AWS::StackName}
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
      Priority: 10
      State: ENABLED

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      # ComputeEnvironmentName: !Sub ${AWS::StackName}
      ComputeResources:
        BidPercentage: 40
        InstanceTypes:
          - optimal
        InstanceRole: !Ref InstanceProfile
        MaxvCpus: 4
        MinvCpus: 0
        SecurityGroupIds:
          - !Ref SecurityGroup
        # SpotIamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/AmazonEC2SpotFleetRole
        SpotIamFleetRole: !Ref SpotFleetRole
        Subnets:
          - Fn::ImportValue: !Sub ${VPCStackName}-PublicSubnet1
          - Fn::ImportValue: !Sub ${VPCStackName}-PublicSubnet2
        Tags: { "Name": "batch" }
        Type: SPOT
      # ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/AWSBatchServiceRole
      ServiceRole: !Ref ServiceRole
      State: ENABLED
      Type: MANAGED

# Roles

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-spot-fleet-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  CreateBagJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-job
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject*
                Resource:
                  - !Join
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${S3StackName}-input
                        - '/*'
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Delete*
                  - s3:Put*
                Resource:
                  - !Join
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${S3StackName}-output
                  - !Join
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${S3StackName}-output
                        - '/*'

# Security Groups

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}
      GroupDescription: !Sub ${AWS::StackName}
      # SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 128.83.0.0/16
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
