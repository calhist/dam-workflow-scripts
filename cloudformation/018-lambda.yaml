---
AWSTemplateFormatVersion: 2010-09-09

Description: Common Lambda functions

Resources:

# Lambda Functions

  CreateBagFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-bag
      Handler: index.handler
      Role: !GetAtt CreateBagExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import re
          client = boto3.client('batch')
          job_queue = 'batch'
          job_definition = 'batch-create-bag'
          def handler(event, context):
            # print('record = ' + json.dumps(record, indent=2))
            s3 = event['Records'][0]['s3']
            asset = "s3://{}/{}".format(s3['bucket']['name'], s3['object']['key'])
            #       BUCKET               PREFIX           OBJECT
            # s3:// 516318261102-input / Squirrels      / Squirrel.jpg
            # s3:// 516318261102-input / Squirrels.MODS / Squirrel.xml
            m = re.match('^s3://([0-9]+-input)/(([^./]+)(\..+)?)/((.+)(\..+))$', asset)
            if m:
              url = m.group(0)
              bucket = m.group(1)
              prefix = m.group(2)
              prefix_base = m.group(3)
              prefix_ext  = m.group(4)
              object = m.group(5)
              object_base = m.group(6)
              object_ext = m.group(7)
              print("{}: {} {} {}".format(url, bucket, prefix, object))
              print("{}: {} {}".format(prefix, prefix_base, prefix_ext))
              print("{}: {} {}".format(object, object_base, object_ext))
            else:
              print('Invalid S3 URL.')
              raise Exception('Invalid S3 URL')
            job_name = "{}-{}".format(prefix.replace('.','-'), object.replace('.','-'))
            try:
              response = client.submit_job(
                jobName=job_name,
                jobQueue=job_queue,
                jobDefinition=job_definition,
                containerOverrides={'command': ['-i', asset]}
              )
            except ClientError as e:
              print(e)
              raise Exception('Something went wrong')
            return 'Success'
      Runtime: python3.7
      Timeout: 10
    Metadata:
      Cost: $0.20/1M Requests

  CreateBagExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - batch:*
                Resource:
                  '*'

  CreateBagLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-create-bag
      RetentionInDays: 3

  RemoveBagFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-remove-bag
      Handler: index.handler
      Role: !GetAtt RemoveBagExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import re
          s3 = boto3.resource('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def handler(event, context):
            # print('EVENT: ' + json.dumps(event, indent=2))
            if 'Records' not in event:
              return 'Ignore event'
            for record in event['Records']:
              if 'eventName' not in record:
                continue
              if record['eventName'] == 'ObjectRemoved:Delete':
                bucket = record['s3']['bucket']['name']
                key = record['s3']['object']['key']
                asset = "s3://{}/{}".format(bucket, key)
                #       BUCKET               PREFIX           OBJECT
                # s3:// 516318261102-input / Squirrels      / Squirrel01.jpg
                # s3:// 516318261102-input / Squirrels.MODS / Squirrel01.xml
                m = re.match('^s3://([0-9]+-input)/(([^./]+)(\..+)?)/((.+)(\..+))$', asset)
                if m:
                  src_url = m.group(0)
                  src_bucket = m.group(1)
                  src_prefix = m.group(2)
                  src_prefix_base = m.group(3)
                  src_prefix_ext  = m.group(4)
                  src_object = m.group(5)
                  src_object_base = m.group(6)
                  src_object_ext = m.group(7)
                  logger.info(src_url)
                  dst_bucket = src_bucket.replace('-input', '-output')
                  dst_bag = '{}.bags/{}'.format(src_prefix_base, src_object_base)
                  bucket = s3.Bucket(dst_bucket)
                  for obj in bucket.objects.filter(Prefix=dst_bag):
                    s3.Object(bucket.name, obj.key).delete()
                  return 'Success'
                else:
                  print('Invalid S3 URL.')
                  raise Exception('Invalid S3 URL')
              else:
                return 'Unknown eventName: ' + record['eventName']
            raise Exception('Something went wrong')
      Runtime: python3.7
      Timeout: 10
    Metadata:
      Cost: $0.20/1M Requests

  RemoveBagExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RemoveBags
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: ListBucket
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${AWS::AccountId}-output
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:ListObjects
                Resource: !Sub arn:aws:s3:::${AWS::AccountId}-output/*

  RemoveBagLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-remove-bag
      RetentionInDays: 3

  StartInstanceFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-start-instance
      Handler: index.handler
      Role: !GetAtt StartInstanceExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ec2 = new aws.EC2();
          exports.handler = async (event) => {
            console.log('INPUT', event);
            let id = event.id;
            try {
              let data = await ec2.startInstances({ InstanceIds: [ id ] }).promise();
              console.log('DATA', data);
            } catch(error) {
              throw new Error(error);
            }
          };
      Runtime: nodejs8.10
      Timeout: 10
    Metadata:
      Cost: $0.20/1M Requests

  StartInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                Resource: '*'

  StartInstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-start-instance
      RetentionInDays: 3

  StopInstanceFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-stop-instance
      Handler: index.handler
      Role: !GetAtt StopInstanceExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ec2 = new aws.EC2();
          exports.handler = async (event) => {
            console.log('INPUT', event);
            let id = event.id;
            try {
              let data = await ec2.stopInstances({ InstanceIds: [ id ] }).promise();
              console.log('DATA', data);
            } catch(error) {
              throw new Error(error);
            }
          };
      Runtime: nodejs8.10
      Timeout: 10
    Metadata:
      Cost: $0.20/1M Requests

  StopInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                Resource: '*'

  StopInstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-stop-instance
      RetentionInDays: 3

Outputs:

  StartInstanceFunctionARN:
    Description: Start EC2 Instance
    Value: !GetAtt StartInstanceFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StartInstanceFunctionARN

  StopInstanceFunctionARN:
    Description: Stop EC2 Instance
    Value: !GetAtt StopInstanceFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StopInstanceFunctionARN
